name: "Build and Deploy with Terraform"

on:
  push:
    branches:
      - main
  pull_request:

env:
 TF_VAR_access_key: ${{ secrets.TF_VAR_ACCESS_KEY}}
 TF_VAR_secret_key: ${{ secrets.TF_VAR_SECRET_KEY}}
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}

jobs:
  terraform:
    name: "Node and Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/prod/
    
    strategy:
      matrix:
        node-version: [19.3.0]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
        working-directory: ./

      - run: npm run build --if-present
        working-directory: ./
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -var="env=dev"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform workspace
        id: workspace
        run: terraform workspace select prod-userservice

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file="./../../.github/workflows/prod.tfvars"
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `####\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="./../../.github/workflows/prod.tfvars"